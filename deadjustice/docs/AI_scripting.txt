AI Scripting


Design
------

Basic idea is to separate states from actual state 
network and to split network into set of state vectors.
This way state transitions become easier to manage
and states remain independent of their following or
preceding states.


Overview
--------

AI is a set of finite state machines.
State machine consists of vector of states.

Each state is a Lua table with following properties:
state = {}
state.enterCondition = function(this) ... end
state.enter = function(this) ... end
state.updateInterval = <seconds>
state.update = function(this) ... end
state.exitCondition = function(this) ... end
state.exit = function(this) ... end


Operation
---------

On each update enterCondition of next state on the vector
is checked. If we assume that state number 3 is active:
If enterCondition of state number 4 becomes true
then state 4 is activated. If exitCondition
of state 3 becomes valid then highest state below
is selected which has enterCondition true.

Example AI script init:

statemachine:removeStates()
statemachine:addState( this:patrolRoute( "PATH_Guard1" ) )
statemachine:addState( this:checkIfNoticed( hero ) )
statemachine:addState( this:turnTo( hero ) )
statemachine:addState( this:crouchAndShoot( hero ) )
statemachine:addState( this:lowOnHealth() )
statemachine:addState( this:duckAndCover() )

Example script execution sequence:
AI patrols until checkIfNoticed enterCondition is true.
turnTo has enter condition that target is in known position
so it becomes valid too. crouchAndShoot has enter condition
that checks that target is in appropriate direction,
so turnTo remains active state until AI is facing towards
player. Then crouchAndShoot becomes active; AI crouches
and then starts shooting. Then AI loses sight on player;
crouchAndShoot exitCondition becomes true.
Now highest valid state is searched; turnTo enterCondition
is false because hero is not in known position. 
Same thing with checkIfNoticed. patrolRoute has no enterCondition
so AI returns to patrolling state.

Optional sequence of events:

Everything happens as before AI loses player. 
When AI loses player and crouchAndShoot exitCondition becomes true,
crouchAndShoot exit function sees that hero is still alive and
decides to follow the player at all cost: it removes all states 
from state machine ands adds following states:

statemachine:removeStates()
statemachine:addState( this:standAlert() )
statemachine:addState( this:runToLastKnownPosition( hero ) )
statemachine:addState( this:checkIfVisible( hero ) )
statemachine:addState( this:shootAndRunTowards( hero ) ) 


